[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "inclass/inclass03/inclass03.html",
    "href": "inclass/inclass03/inclass03.html",
    "title": "in-class Exercise 3",
    "section": "",
    "text": "Installing and loading R packages\nTwo packages will be installed and loaded\nThey are ggraph and tidyverse\n\npacman::p_load(tidyverse,ggraph)\n\nimport data\n\nexam_data <- read.csv(\"data/Exam_data.csv\")\n\n\nggplot(data= exam_data,\n          aes(x = MATHS))+\n    geom_dotplot(dotsize = 0.5)"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html",
    "href": "inclass/inclass05/inclass05.html",
    "title": "inclass05",
    "section": "",
    "text": "pacman::p_load(corrplot, tidyverse, ggstatsplot)\n\n\nwine <- read_csv(\"data/wine_quality.csv\")\nview(wine)\npairs(wine[,2:12])\n\n\n\n\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\npairs(wine[,2:12],lower.panel = NULL)\n\n\n\n\n\nwine.cor <- cor(wine[, 1:11])\ncorrplot(wine.cor)\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#installing-and-launching-r-packages",
    "href": "inclass/inclass05/inclass05.html#installing-and-launching-r-packages",
    "title": "inclass05",
    "section": "Installing and launching R packages",
    "text": "Installing and launching R packages\n\npacman::p_load(ggtern, plotly, tidyverse)"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#data-preparation",
    "href": "inclass/inclass05/inclass05.html#data-preparation",
    "title": "inclass05",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nImporting Data\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\nPreparing the Data\n\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population) %>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)\n\n\n\nPlotting Ternary Diagram with R\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#datainstall-and-launching-r-packages",
    "href": "inclass/inclass05/inclass05.html#datainstall-and-launching-r-packages",
    "title": "inclass05",
    "section": "DataInstall and Launching R Packages",
    "text": "DataInstall and Launching R Packages\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#importing-and-preparing-the-data-set",
    "href": "inclass/inclass05/inclass05.html#importing-and-preparing-the-data-set",
    "title": "inclass05",
    "section": "Importing and Preparing The Data Set",
    "text": "Importing and Preparing The Data Set\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\n\nPreparing the data\n\nrow.names(wh) <- wh$Country\n\n\n\nTransforming the data frame into a matrix\n\n\n\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#static-heatmap",
    "href": "inclass/inclass05/inclass05.html#static-heatmap",
    "title": "inclass05",
    "section": "Static Heatmap",
    "text": "Static Heatmap\n\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\nwh_heatmap <- heatmap(wh_matrix)\n\n\n\n\n\nwh_heatmap <- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#creating-interactive-heatmap",
    "href": "inclass/inclass05/inclass05.html#creating-interactive-heatmap",
    "title": "inclass05",
    "section": "Creating Interactive Heatmap",
    "text": "Creating Interactive Heatmap\n\nview(mtcars)\nheatmaply(mtcars)\n\n\n\n\n\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#data-trasformation",
    "href": "inclass/inclass05/inclass05.html#data-trasformation",
    "title": "inclass05",
    "section": "Data trasformation",
    "text": "Data trasformation\n\nScaling method\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nNormalising method\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nPercentising method\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#clustering-algorithm",
    "href": "inclass/inclass05/inclass05.html#clustering-algorithm",
    "title": "inclass05",
    "section": "Clustering algorithm",
    "text": "Clustering algorithm\n\nManual approach\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nwh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\n\nwh_clust <- hclust(wh_d, method = \"average\")\nnum_k <- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#seriation",
    "href": "inclass/inclass05/inclass05.html#seriation",
    "title": "inclass05",
    "section": "Seriation",
    "text": "Seriation\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "inclass/inclass05/inclass05.html#working-with-colour-palettes",
    "href": "inclass/inclass05/inclass05.html#working-with-colour-palettes",
    "title": "inclass05",
    "section": "Working with colour palettes",
    "text": "Working with colour palettes\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\nThe finishing touch\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "inclass/inclass07/inclass07.html",
    "href": "inclass/inclass07/inclass07.html",
    "title": "inclass07",
    "section": "",
    "text": "pacman::p_load(sf,tmap,tidyverse) #simple feature\n\nGeospatial Data Wrangling\n\nsgpools <- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nRows: 306 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): NAME, ADDRESS, OUTLET TYPE\ndbl (4): POSTCODE, XCOORD, YCOORD, Gp1Gp2 Winnings\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(sgpools)\n\n[[1]]\n# A tibble: 306 × 7\n   NAME                            ADDRESS POSTC…¹ XCOORD YCOORD OUTLE…² Gp1Gp…³\n   <chr>                           <chr>     <dbl>  <dbl>  <dbl> <chr>     <dbl>\n 1 Livewire (Marina Bay Sands)     2 Bayf…   18972 30842. 29599. Branch        5\n 2 Livewire (Resorts World Sentos… 26 Sen…   98138 26704. 26526. Branch       11\n 3 SportsBuzz (Kranji)             Lotus …  738078 20118. 44888. Branch        0\n 4 SportsBuzz (PoMo)               1 Sele…  188306 29777. 31382. Branch       44\n 5 Prime Serangoon North           Blk 54…  552542 32239. 39519. Branch        0\n 6 Singapore Pools Woodlands Cent… 1A Woo…  731001 21012. 46987. Branch        3\n 7 Singapore Pools 64 Circuit Rd … Blk 64…  370064 33990. 34356. Branch       17\n 8 Singapore Pools 88 Circuit Rd … Blk 88…  370088 33847. 33976. Branch       16\n 9 Singapore Pools Anchorvale Rd … Blk 30…  540308 33910. 41275. Branch       21\n10 Singapore Pools Ang Mo Kio N2 … Blk 20…  560202 29246. 38943. Branch       25\n# … with 296 more rows, and abbreviated variable names ¹​POSTCODE,\n#   ²​`OUTLET TYPE`, ³​`Gp1Gp2 Winnings`"
  },
  {
    "objectID": "inclass/inclass08/Untitled.html",
    "href": "inclass/inclass08/Untitled.html",
    "title": "inclass08",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\nData Wrangling"
  },
  {
    "objectID": "inclass/inclass08/Untitled.html#creating-facet-graphs",
    "href": "inclass/inclass08/Untitled.html#creating-facet-graphs",
    "title": "inclass08",
    "section": "Creating facet graphs",
    "text": "Creating facet graphs\n\nWorking with facet_edges()\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\nWorking with facet_edges()\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\nA framed facet graph\n\nset_graph_style() \n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\nWorking with facet_nodes()\n\n\n\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "inclass/inclass08/Untitled.html#network-metrics-analysis",
    "href": "inclass/inclass08/Untitled.html#network-metrics-analysis",
    "title": "inclass08",
    "section": "Network Metrics Analysis",
    "text": "Network Metrics Analysis\n\ng <- GAStech_graph %>%\n  mutate(betweenness_centrality = centrality_betweenness()) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\nVisualising network metrics\n\n\n\ng <- GAStech_graph %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\nVisualising Community\n\ng <- GAStech_graph %>%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\nWarning: There were 2 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `community = as.factor(group_edge_betweenness(weights = Weight,\n  directed = TRUE))`.\nCaused by warning in `cluster_edge_betweenness()`:\n! At core/community/edge_betweenness.c:493 : Membership vector will be selected based on the highest modularity score.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\ng + theme_graph()"
  },
  {
    "objectID": "inclass/inclass06/Hands-on_Ex06-VisTime.html",
    "href": "inclass/inclass06/Hands-on_Ex06-VisTime.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a horizon chart"
  },
  {
    "objectID": "inclass/inclass06/Hands-on_Ex06-VisTime.html#getting-started",
    "href": "inclass/inclass06/Hands-on_Ex06-VisTime.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Getting Started",
    "text": "Getting Started\n::: callout-info ## Do It Yourself Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nShow the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)"
  },
  {
    "objectID": "inclass/inclass06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "href": "inclass/inclass06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmetically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nThe Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\nImporting the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\n\ntz field stores time zone of the source IP address.\n\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nNote: Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the Calendar Heatmaps\n\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn from the code chunk: - a tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. - a new field called n is derived by using group_by() and count() functions. - na.omit() is used to exclude missing value. - geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. - theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot. - coord_equal() is used to ensure the plot will have an aspect ratio of 1:1. - scale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\nBuilding Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "inclass/inclass06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "href": "inclass/inclass06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Cycle Plot",
    "text": "Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nData Preparation\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\nStep 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\nStep 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nPlotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "TAKEHOME/TAKEHOME01/takehome01.html",
    "href": "TAKEHOME/TAKEHOME01/takehome01.html",
    "title": "Takehome01",
    "section": "",
    "text": "](images/image-400834270.png)\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "TAKEHOME/TAKEHOME02/takehome2.html#critique",
    "href": "TAKEHOME/TAKEHOME02/takehome2.html#critique",
    "title": "Takehome02",
    "section": "Critique",
    "text": "Critique\n\nclarity\n-Title is not clear enough.from the title, users cannot tell what topic and info will be delivered.a possible title could be\nAge sex pyramid in Singapore: Top 9 most populated planning area - June 2022\n-Bins plotted too tightly.there are too many bins from the whole view, it is hard for viewers to locate and identify a apecific figure and pattern.\n-Lack of indicators. there are not any reference line to help viewers to locate any detail of the figure\n\n\nAesthetics\n-Do not have any color combination. there are only blue and red with white background which can not attract any attention\n-Too little area between axis and graph. There is currently no segreation between the graph area and the axis. try to add color and other graph to make it easier for viewers to see"
  },
  {
    "objectID": "TAKEHOME/TAKEHOME02/takehome2.html#libraries",
    "href": "TAKEHOME/TAKEHOME02/takehome2.html#libraries",
    "title": "Takehome02",
    "section": "Libraries",
    "text": "Libraries\nThe R packages we’ll use for this analysis are:\n\ntidyverse - a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\nggplot2 - a system for declaratively creating graphics, based on The Grammar of Graphics (ggplot2 is included in the tidyverse package, i’m highlighting it here for emphasis, since it’s our main tool for visualisation)\nggthemes - The ggthemes package provides extra themes, geoms, and scales for the ggplot2 package\nggiraph - a package that provides interactive elements to ggplot like animations and tooltips (was not used after experimenting with it, leaving it here for reference)\nplotly - another package that provides interactive elements to ggplot (was not used after experimenting with it, leaving it here for reference)"
  },
  {
    "objectID": "TAKEHOME/TAKEHOME02/takehome2.html#preparing-the-data-set",
    "href": "TAKEHOME/TAKEHOME02/takehome2.html#preparing-the-data-set",
    "title": "Takehome02",
    "section": "Preparing the Data Set",
    "text": "Preparing the Data Set\n\nloading Packages\n\npacman::p_load(tidyverse, ggthemes, ggiraph, plotly)\n\n\n\nImporting and tidying the data\n\nsg <- read_csv('data/respopagesexfa2022.csv')\n\nAfter importing the original data into Rstudio, i want to check if there is any incorrect or messy\n\nstr(sg)\n\nspc_tbl_ [75,696 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ PA  : chr [1:75696] \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ  : chr [1:75696] \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ AG  : chr [1:75696] \"0_to_4\" \"0_to_4\" \"0_to_4\" \"0_to_4\" ...\n $ Sex : chr [1:75696] \"Males\" \"Males\" \"Males\" \"Males\" ...\n $ FA  : chr [1:75696] \"<= 60\" \">60 to 80\" \">80 to 100\" \">100 to 120\" ...\n $ Pop : num [1:75696] 0 10 20 60 10 0 0 0 20 50 ...\n $ Time: num [1:75696] 2022 2022 2022 2022 2022 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   PA = col_character(),\n  ..   SZ = col_character(),\n  ..   AG = col_character(),\n  ..   Sex = col_character(),\n  ..   FA = col_character(),\n  ..   Pop = col_double(),\n  ..   Time = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nWe can observe that there are more data than we really need, so i choose select function to select some columns.\n\nsgsubset <- sg %>% \n  select(PA, AG, Sex, Pop)\nnames(sgsubset) <-c('Planning_Area', 'Age_group', 'Gender', 'Population')\n\nUse level to check the order of factors\n\nlevels(factor(sgsubset$Age_group))\n\n [1] \"0_to_4\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"    \"25_to_29\"   \n [6] \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"    \"5_to_9\"     \n[11] \"50_to_54\"    \"55_to_59\"    \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n\n\nI notice that “5_to_9” is out of place. Use mutate() and arrange() to correct this.\n\norder <- c(\"0_to_4\", \"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\", \"25_to_29\", \"30_to_34\", \"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\", \"60_to_64\", \"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\nsgsubset <- sgsubset %>%\n  mutate(Age_group =  factor(Age_group, levels = order)) %>%\n  arrange(Age_group)\n\nlevels(sgsubset$Age_group)\n\n [1] \"0_to_4\"      \"5_to_9\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"   \n [6] \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"   \n[11] \"50_to_54\"    \"55_to_59\"    \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n\n\n\n\nPreparation for visualisation\n\nCheck_PA <- sgsubset %>%\n  group_by(`Planning_Area`) %>%\n  summarise(sum_pop = sum(Population), .groups = 'drop') %>%\n  arrange(sum_pop,.by_group = TRUE) %>%\n  top_n(9) %>%\n  ungroup()\n\nCheck_PA\n\n# A tibble: 9 × 2\n  Planning_Area sum_pop\n  <chr>           <dbl>\n1 Punggol        186250\n2 Choa Chu Kang  190460\n3 Yishun         222770\n4 Hougang        227720\n5 Woodlands      252720\n6 Sengkang       253050\n7 Jurong West    258520\n8 Tampines       265610\n9 Bedok          278870\n\n\n\nsgsubsettop9 <- sgsubset %>% filter(`Planning_Area` %in% c('Bedok', 'Tampines', 'Jurong West', 'Sengkang', 'Woodlands', 'Hougang', 'Yishun', 'Choa Chu Kang', 'Punggol'))\n\n\n\nVisualising the Age-Sex Pyramid in a Trellis Display\nDesign X and Y\n\nagesexP <- ggplot(sgsubsettop9,aes(x = `Age_group`, y = Population,fill = Gender)) + \n  geom_bar(data = subset(sgsubsettop9,Gender == 'Females'), stat = 'identity') + \n  geom_bar(data = subset(sgsubsettop9,Gender == 'Males'), stat = 'identity', mapping = aes(y = -(Population))) + \n  coord_flip() + \n  facet_wrap(~`Planning_Area`,ncol = 3)\n\ndesign\n\nagesexP +\n  ggtitle(\"Singapore Age-Sex Pyramid (Age sex pyramid in Singapore: Top 9 most populated planning area - June 2022\") + \n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 3)) + \n  xlab(\"Age Group\") + \n  ylab(\"Population\")+\n  scale_fill_manual(values=c('coral','cyan'))"
  },
  {
    "objectID": "TAKEHOME/TAKEHOME02/takehome2.html#learning-points",
    "href": "TAKEHOME/TAKEHOME02/takehome2.html#learning-points",
    "title": "Takehome02",
    "section": "Learning points",
    "text": "Learning points\nTableau and Rstudio are two different mindset visualization methods.\nfirst one is more visual and convenient to create presentation ready visualisations without any coding knowledge. This makes tableau much more accessible to the general public and beginners\nOn the other hand, visualisations in ‘R’ can achieve the same if not better visualisation that Tableau with much more granular control over the various attributes and objects shown. However the difficult part is coding knowledge required.\nIn the end, which tool to be used may depended on the people and the requirement."
  },
  {
    "objectID": "TAKEHOME/TAKEHOME03/TAKEHOME03.html",
    "href": "TAKEHOME/TAKEHOME03/TAKEHOME03.html",
    "title": "Takehome03",
    "section": "",
    "text": "pacman::p_load(dplyr, tidyverse, DT, ggplot2, ggiraph, \n               ggstatsplot, patchwork, plotly, gganimate, \n               ggthemes, corrplot, heatmaply,lubridate,scales,ggrepel,ggpubr)\n\n\nresale_data <- read_csv(\"data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\nDT::datatable(head(resale_data,20)) \n\n\n\n\n\n\nConvert the date format from YYYY-MM to Y-M-D:\n\nresale_data <- resale_data %>% \n  mutate(month = as.Date(paste0(month, \"-01\"), format = \"%Y-%m-%d\"))\n\nConvert the date format to Y-M-D, D is first day of each month:\n\nresale_345room_2022 <- resale_data %>% \n  filter(flat_type %in% c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\"), \n         year(month) == '2022') %>%\n  mutate(\"unit_price_sqm\" = resale_price/floor_area_sqm)\n\n\nDT::datatable(head(resale_345room_2022))"
  },
  {
    "objectID": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#average-resale-price-by-type",
    "href": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#average-resale-price-by-type",
    "title": "Takehome03",
    "section": "2.1 Average Resale Price By Type",
    "text": "2.1 Average Resale Price By Type\n\n# Group data by flat type\nresale_345room_2022_grouped <- resale_345room_2022 %>%\n  group_by(flat_type, month) %>%\n  summarise(resale_price = mean(resale_price)/1000)\n\n# Plot monthly trend by flat type\nggplot(resale_345room_2022_grouped, aes(x = month, y = resale_price, color = flat_type)) +\n  geom_line() +\n  scale_x_date(date_labels = \"%b\", date_breaks = \"1 months\") +\n  labs(x = \"Month\", y = \"Resale Price (SGD, thousands)\", color = \"Flat Type\",title = \"Monthly Resale Price Trend by Flat Type (2022)\") +\n  theme_bw()\n\n\n\n\nFrom this graph, the average resale price of 3 types, 5 room is the highest, then is the 4-room, the price of 3-room is the lowest.\nThe price is rising while the area rises."
  },
  {
    "objectID": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#average-resale-per-sqm-price-by-type",
    "href": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#average-resale-per-sqm-price-by-type",
    "title": "Takehome03",
    "section": "2.2Average Resale Per SQM Price By Type",
    "text": "2.2Average Resale Per SQM Price By Type\n\n# Group the data by flat type and month, and calculate the average unit resale price\nresale_avg <- resale_345room_2022 %>%\n  group_by(flat_type, month) %>%\n  summarise(avg_resale_price = mean(resale_price)/mean(floor_area_sqm))\n\n# Plot the line chart with dynamic tooltips using ggplot and plotly\np <- ggplot(resale_avg, aes(x = month, y = avg_resale_price, color = flat_type, group = flat_type)) +\n  geom_line() +\n  scale_x_date(date_labels = \"%b\", date_breaks = \"1 months\") +\n  scale_y_continuous(labels = function(x) paste0(x/1000, \"k\")) +\n  labs(x = \"Month\", y = \"Unit Price\", title = \"Average Unit Resale Price Trend by Flat Type (2022)\") +\n  theme_bw()\n\nggplotly(p, tooltip = c(\"month\", \"avg_resale_price\"))\n\n\n\n\n\nFrom this graph, the unit resale price of 3 types, 4 room is the overall highest, then is the 3-room, the price of 5-room is the lowest.\nFrom the time view, all of the 3 types grow gradually while there are some disrupted peak and drop especially around March,Auf and Nov.\nFor the 4 ROOM type,it grew smoothly before July, then a suddenly drop in Aug. after that increased rapidly while drop again in Nov.\nFor the 5 ROOM type,it grew fluctuately and didn’t grow as much as other 2 types eventually. It rise and decrease alternatively every month, the sudden drop happened between 2 stages of increase May to July, Aug to Oct.\nFor the 4 ROOM type,it grew fluctuately but saw a definite growth compared with the start of the year. There are 3 disruptive rises happend in March, June, September respectively.\nThe price is rising while the area rises."
  },
  {
    "objectID": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Takehome03",
    "section": "2.3 Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "2.3 Visualizing the uncertainty of point estimates: ggplot2 methods\n\nmy_sum <- resale_345room_2022 %>%\n  group_by(flat_type) %>%\n  summarise(\n    n=n(),\n    mean=mean(unit_price_sqm),\n    sd=sd(unit_price_sqm)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=flat_type, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=flat_type, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          unit price by flat type\")"
  },
  {
    "objectID": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#the-distribution-of-lease-commence-date-of-2022-by-flat-type",
    "href": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#the-distribution-of-lease-commence-date-of-2022-by-flat-type",
    "title": "Takehome03",
    "section": "2.4 The Distribution of Lease Commence Date of 2022 by Flat Type",
    "text": "2.4 The Distribution of Lease Commence Date of 2022 by Flat Type\n\nresale_3room <- resale_345room_2022 %>%  \n  filter(flat_type == \"3 ROOM\")\n         \ngghistostats(\n  data = resale_3room ,\n  x = lease_commence_date,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"lease commence date\",\n  title=\"The Distribution of Lease Commence Date for 3-Room (2022)\",\n)\n\n\n\n\n\nresale_4room <- resale_345room_2022  %>% \n  filter(flat_type == \"4 ROOM\")\n         \ngghistostats(\n  data = resale_4room ,\n  x = lease_commence_date,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"lease commence date\",\n  title=\"The Distribution of Lease Commence Date for 4-Room (2022)\",\n)\n\n\n\n\n\nresale_5room <- resale_345room_2022  %>%\n  filter(flat_type == \"5 ROOM\")\n         \ngghistostats(\n  data = resale_5room ,\n  x = lease_commence_date,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"lease commence date\",\n  title=\"The Distribution of Lease Commence Date for 5-Room (2022)\",\n)"
  },
  {
    "objectID": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#one-way-anova-test-on-unit-price-sqm-by-flat-type",
    "href": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#one-way-anova-test-on-unit-price-sqm-by-flat-type",
    "title": "Takehome03",
    "section": "2.5 One-way ANOVA test on Unit Price / sqm by Flat Type",
    "text": "2.5 One-way ANOVA test on Unit Price / sqm by Flat Type\n\np <- ggbetweenstats(\n  data = resale_345room_2022,\n  x = flat_type, \n  y = unit_price_sqm,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\np + labs(title = \"One-way ANOVA test on Unit Price / sqm by Flat Type\", \n         y = \"Unit Price / sqm\",\n         x = \"Flat Type\")\n\n\n\n\nFor the mean of unit price of 3 types flats, 4 room is the highest, then is the 3 room, then is the 5 room\nFor the max of unit price of 3 types flats,4 room is the highest,while 3 and 5 is almost the same.\nFor the width of unit price of 3 types flats,3 room is the wildest,then is the 5 room, last is the 4 room."
  },
  {
    "objectID": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#resale-price-by-town-and-flat-type",
    "href": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#resale-price-by-town-and-flat-type",
    "title": "Takehome03",
    "section": "2.6 Resale Price by Town and Flat Type",
    "text": "2.6 Resale Price by Town and Flat Type\n\nggplot(resale_345room_2022, aes(x=town, y=resale_price/1000, fill=flat_type)) + \n  geom_boxplot() + \n  xlab(\"Town\") + \n  ylab(\"Resale Price (in '000s')\") + \n  scale_fill_manual(values=c(\"blue\", \"red\", \"green\", \"orange\", \"purple\", \"pink\")) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), \n        plot.margin = unit(c(1, 5, 1, 1), \"cm\"), \n        axis.title.x = element_text(size = 18), \n        axis.title.y = element_text(size = 18),\n        legend.title = element_blank(),\n        legend.text = element_text(size = 18)) +\n  labs(title = \"Resale Price by Town and Flat Type\") +\n  scale_y_continuous(labels = function(x) paste0(x, \"k\")) +\n  coord_cartesian(clip = \"off\", ylim = c(0, 1400)) +\n  theme(plot.title = element_text(size = 18, face = \"bold\"),\n        axis.text.y = element_text(size = 18),\n        legend.position = \"bottom\",\n        legend.box = \"horizontal\",\n        legend.margin = margin(t = 0, r = 0, b = 0, l = 0)\n        ) \n\n\n\n\nFor the average price range of 3 room type (75% - 25%), 5-room seems has a biggest range within different districts, which in graph shows the box is longer.\nwhile 3-room seems has a smallest range within different districts which in graph shows the box is shorter."
  },
  {
    "objectID": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#from-average-resale-per-sqm-price-by-type",
    "href": "TAKEHOME/TAKEHOME03/TAKEHOME03.html#from-average-resale-per-sqm-price-by-type",
    "title": "Takehome03",
    "section": "From Average Resale Per SQM Price By Type",
    "text": "From Average Resale Per SQM Price By Type\n4- ROOM is the highest, this may related to customer’s preference and population structure in Singapore property market.\nIn Aug and December, there is a big drop on average resale per sqm price of all 3 types, we can find the root cause and come up with some action.\nIn March, there will be a obview fluctuation on average resale per sqm price of all 3 types, we can find the root cause and come up with some action."
  }
]