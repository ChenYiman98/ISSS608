---
title: "takehome04"
---

## Data Import

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse,tidyr,janitor,tibble, plotly)
```

```{r}
library(readxl)
 
import_data=read_excel('data/outputFile.xlsx',sheet = "T1")
 
export_data=read_excel('data/outputFile.xlsx',sheet = "T2")
```

```{r}
View(import_data)
View(export_data)
```

## Data Wrangling

### Data Frame Transpose

```{r}
import_data_trans <- import_data %>%
  select(matches("Data|202[0-2]")) %>%  #select columns which time range meet requirment  
  t() %>%
  row_to_names(row_number = 1) %>%
  as.data.frame() %>%        #convert to a data frame
  tibble::rownames_to_column("timestamp") %>%
  mutate(timestamp = lubridate::ymd(paste0(timestamp,"01")))%>%
  arrange(timestamp)
  
```

```{r}
export_data_trans <- export_data %>%
  select(matches("Data|202[0-2]")) %>%  #select columns which time range meet requirment  
  t()%>%
  row_to_names(row_number = 1) %>%
  as.data.frame() %>%        #convert to a data frame
  tibble::rownames_to_column(timestamp) %>%
  mutate(timestamp = lubridate::ymd(paste0(timestamp,"01")))%>%
  arrange(timestamp)
  
```

```{r}
view(import_data_trans)
```

### Data Frame Pivot

```{r}
import_filtered <- import_data %>%
  select(matches("Data|202[0-2]"))
imports_pivot <- import_filtered %>%
  pivot_longer(
    cols = !"Data Series",
    names_to = "timestamp",
    values_to = "value"
  )%>%
  mutate(timestamp = lubridate::ymd(paste0(timestamp, "01"))) %>% # Convert "timestamp" column to a standard date format
  arrange(timestamp)
```

```{r}
export_filtered <- export_data %>%
  select(matches("Data|202[0-2]"))
exports_pivot <- export_filtered %>%
  pivot_longer(
    cols = !"Data Series",
    names_to = "timestamp",
    values_to = "value"
  )%>%
  mutate(timestamp = lubridate::ymd(paste0(timestamp, "01"))) %>% # Convert "timestamp" column to a standard date format
  arrange(timestamp)
```

```{r}
View(imports_pivot)
View(exports_pivot)
```

# Visualization 

## **Plotting Slopegraph**

```{r}
imports_pivot %>%
  newggslopegraph(timestamp,value,`Data Series`,
                  Title = "import",
                  SubTitle = "2020 Jan- 2022 Dec",
                  Caption = "processed by Yiman Chen")
```

## **Plotting the Horizon Graph**

```{r}
imports_pivot%>%
  ggplot()+
  geom_horizon(aes(x=timestamp , y=value),
               origin = "midpoint",
               horizonscale = 6)+
  facet_grid(`Data Series`~.) +
    theme_few() +
  scale_fill_hcl(palette = 'RdBu') +
  theme(panel.spacing.y=unit(0, "lines"), strip.text.y = element_text(
    size = 5, angle = 0, hjust = 0),
    legend.position = 'none',
    axis.text.y = element_blank(),
    axis.text.x = element_text(size=7),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
    scale_x_date(expand=c(0,0), date_breaks = "3 month", date_labels = "%b%y") +
  ggtitle('Import Value from Different Countries to Singapore (Jan 2020 to Dec 2022)')
```

## **Plotting Cycle Plot**

Derive month and year fields

```{r}
imports_pivot%>%
month <- factor(month(imports_pivot$`Data Series`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
year <- year(ymd(imports_pivot$`Data Series`))
```

## million dollar change into thousand dollar

```{r}
data_df_import = import_data %>%
  select(`Data Series`, `2022 Dec`:`2022 Jan`)
data_df_import

```

```{r}
data_df_import %>%
  mutate(data_thousand = ifelse(str_detect(`Data Series`,'Thousand'),
                                str_match(`Data Series`,'(.*)Thousand')[,2],
                                0),
         data_million = ifelse(str_detect(`Data Series`,'Million'),
                                str_match(`Data Series`,'(.*)Million')[,2],
                                0)) 
```

```{r}
library(tidyr)
```

```{r}
data_df_import %>%
  distinct(`Data Series`,data_thousand, data_million)%>%
  pivot_longer(2:3, names_to = "type of unit of measurement",values_to ="2022 Jan") %>%
  filter(`2022 Jan` = 20.0)
```

as we can see, in import section, most of the value computation is in thousand, few are in million, so we are going to change the million with thousand

```{}
```
